{"version":3,"file":"HomePage-BNhsWKnH.js","sources":["../../../src/store/useChatStore.js","../../../src/components/skeletons/SidebarSkeleton.jsx","../../../src/components/Sidebar.jsx","../../../src/components/NoChatSelected.jsx","../../../src/lib/utils.js","../../../src/components/ChatHeader.jsx","../../../src/components/MessageInput.jsx","../../../src/components/skeletons/MessageSkeleton.jsx","../../../src/components/ChatContainer.jsx","../../../src/pages/HomePage.jsx"],"sourcesContent":["import { create } from \"zustand\";\r\nimport toast from \"react-hot-toast\";\r\nimport { axiosInstance } from \"../lib/axios\";\r\nimport { useAuthStore } from \"./useAuthStore\";\r\n\r\nexport const useChatStore = create((set, get) => ({\r\n  messages: [],\r\n  users: [],\r\n  selectedUser: null,\r\n  isUsersLoading: false,\r\n  isMessagesLoading: false,\r\n  replyingTo: null,\r\n  typingUsers: {}, // {userId: {isTyping: boolean, timestamp: number}}\r\n  typingTimeout: null,\r\n  typingDebounceTime: 1000, // 1 second debounce\r\n\r\n  getUsers: async (silentRefresh = false) => {\r\n    // Only show loading state on initial loads, not refreshes\r\n    if (!silentRefresh) {\r\n      set({ isUsersLoading: true });\r\n    }\r\n    \r\n    try {\r\n      const res = await axiosInstance.get(\"/messages/users-sidebar\");\r\n      \r\n      // Filter out unread counts for messages sent by the current user\r\n      const authUserId = useAuthStore.getState().authUser?._id;\r\n      const filteredUsers = res.data.map(user => {\r\n        if (user.lastMessage && user.lastMessage.senderId === authUserId) {\r\n          // If last message is from auth user, we don't show unread count\r\n          return {\r\n            ...user,\r\n            unreadCount: 0\r\n          };\r\n        }\r\n        return user;\r\n      });\r\n      \r\n      set({ users: filteredUsers });\r\n    } catch (error) {\r\n      // Only show errors if not in silent refresh mode\r\n      if (!silentRefresh) {\r\n        toast.error(error.response?.data?.message || \"Failed to load contacts\");\r\n      } else {\r\n        console.error(\"Error refreshing users:\", error);\r\n      }\r\n    } finally {\r\n      if (!silentRefresh) {\r\n        set({ isUsersLoading: false });\r\n      }\r\n    }\r\n  },\r\n\r\n  getMessages: async (userId) => {\r\n    set({ isMessagesLoading: true });\r\n    try {\r\n      const res = await axiosInstance.get(`/messages/${userId}`);\r\n      set({ messages: res.data });\r\n      \r\n      // Mark messages as seen when loading chat\r\n      get().markMessagesAsSeen(userId);\r\n    } catch (error) {\r\n      toast.error(error.response.data.message);\r\n    } finally {\r\n      set({ isMessagesLoading: false });\r\n    }\r\n  },\r\n  \r\n  markMessagesAsSeen: async (senderId) => {\r\n    try {\r\n      // Call the API endpoint to mark messages as seen\r\n      await axiosInstance.post(`/messages/${senderId}/seen`);\r\n      \r\n      // Also emit socket event for real-time updates\r\n      const socket = useAuthStore.getState().socket;\r\n      if (socket) {\r\n        socket.emit(\"markMessagesAsSeen\", { senderId });\r\n      }\r\n      \r\n      // Update local message state to reflect seen status\r\n      const { messages } = get();\r\n      const updatedMessages = messages.map(message => {\r\n        if (message.senderId === senderId && !message.seenAt) {\r\n          return {\r\n            ...message,\r\n            seenAt: new Date().toISOString()\r\n          };\r\n        }\r\n        return message;\r\n      });\r\n      \r\n      set({ messages: updatedMessages });\r\n      \r\n      // Refresh user list to update unread counts - use silent refresh\r\n      get().getUsers(true);\r\n    } catch (error) {\r\n      console.error(\"Error marking messages as seen:\", error);\r\n    }\r\n  },\r\n  \r\n  sendMessage: async (messageData) => {\r\n    const { selectedUser, messages, replyingTo } = get();\r\n    \r\n    // If there's a message being replied to, add its ID to the message data\r\n    if (replyingTo) {\r\n      messageData.replyToId = replyingTo._id;\r\n    }\r\n    \r\n    try {\r\n      const res = await axiosInstance.post(`/messages/${selectedUser._id}`, messageData);\r\n      set({ \r\n        messages: [...messages, res.data],\r\n        replyingTo: null // Clear the reply after sending\r\n      });\r\n      \r\n      // Stop typing indicator when message is sent\r\n      get().setUserTyping(false);\r\n      \r\n      // Refresh user list to update last message - use silent refresh\r\n      get().getUsers(true);\r\n    } catch (error) {\r\n      toast.error(error.response?.data?.message || \"Failed to send message\");\r\n    }\r\n  },\r\n  \r\n  editMessage: async (messageId, text) => {\r\n    const { messages } = get();\r\n    try {\r\n      const res = await axiosInstance.put(`/messages/${messageId}`, { text });\r\n      \r\n      // Update the message in the local state\r\n      const updatedMessages = messages.map(message => \r\n        message._id === messageId ? res.data : message\r\n      );\r\n      \r\n      set({ messages: updatedMessages });\r\n      toast.success(\"Message updated\");\r\n      \r\n      // Refresh user list to update last message - use silent refresh\r\n      get().getUsers(true);\r\n    } catch (error) {\r\n      toast.error(error.response?.data?.message || \"Failed to edit message\");\r\n    }\r\n  },\r\n  \r\n  deleteMessage: async (messageId) => {\r\n    const { messages } = get();\r\n    try {\r\n      await axiosInstance.delete(`/messages/${messageId}`);\r\n      \r\n      // Update the message in the local state\r\n      const updatedMessages = messages.map(message => {\r\n        if (message._id === messageId) {\r\n          return {\r\n            ...message,\r\n            text: \"This message was deleted\",\r\n            image: \"\",\r\n            isDeleted: true\r\n          };\r\n        }\r\n        return message;\r\n      });\r\n      \r\n      set({ messages: updatedMessages });\r\n      toast.success(\"Message deleted\");\r\n      \r\n      // Refresh user list to update last message - use silent refresh\r\n      get().getUsers(true);\r\n    } catch (error) {\r\n      toast.error(error.response?.data?.message || \"Failed to delete message\");\r\n    }\r\n  },\r\n  \r\n  addReaction: async (messageId, emoji) => {\r\n    const { messages } = get();\r\n    try {\r\n      const res = await axiosInstance.post(`/messages/${messageId}/react`, { emoji });\r\n      \r\n      // Update the message in the local state\r\n      const updatedMessages = messages.map(message => \r\n        message._id === messageId ? res.data : message\r\n      );\r\n      \r\n      set({ messages: updatedMessages });\r\n    } catch (error) {\r\n      toast.error(error.response?.data?.message || \"Failed to add reaction\");\r\n    }\r\n  },\r\n  \r\n  setReplyingTo: (message) => {\r\n    set({ replyingTo: message });\r\n  },\r\n  \r\n  clearReplyingTo: () => {\r\n    set({ replyingTo: null });\r\n  },\r\n  \r\n  setUserTyping: (isTyping) => {\r\n    const { selectedUser, typingTimeout, typingDebounceTime } = get();\r\n    const socket = useAuthStore.getState().socket;\r\n    const authUser = useAuthStore.getState().authUser;\r\n    \r\n    if (!selectedUser || !socket || !socket.connected || !authUser) return;\r\n    \r\n    // Clear existing timeout if it exists\r\n    if (typingTimeout) {\r\n      clearTimeout(typingTimeout);\r\n    }\r\n    \r\n    // Set a new timeout - this creates a debounce effect\r\n    const timeout = setTimeout(() => {\r\n      // Send typing status to server\r\n      socket.emit(\"typing\", { \r\n        isTyping, \r\n        receiverId: selectedUser._id \r\n      });\r\n    }, typingDebounceTime);\r\n    \r\n    set({ typingTimeout: timeout });\r\n  },\r\n  \r\n  userIsTyping: (userId) => {\r\n    const { typingUsers } = get();\r\n    const authUser = useAuthStore.getState().authUser;\r\n    \r\n    // Don't show typing indicator for self\r\n    if (authUser?._id === userId) return false;\r\n    \r\n    return typingUsers[userId]?.isTyping || false;\r\n  },\r\n\r\n  subscribeToMessages: () => {\r\n    const { selectedUser } = get();\r\n    if (!selectedUser) return;\r\n\r\n    const socket = useAuthStore.getState().socket;\r\n    const authUser = useAuthStore.getState().authUser;\r\n\r\n    if (!socket || !authUser) return;\r\n\r\n    // Send username in query for better typing indicators\r\n    if (!socket.io.opts.query) {\r\n      socket.io.opts.query = {};\r\n    }\r\n    socket.io.opts.query.username = authUser.username || authUser.fullName;\r\n\r\n    // Listen for new messages\r\n    socket.on(\"newMessage\", (newMessage) => {\r\n      const isMessageSentFromSelectedUser = newMessage.senderId === selectedUser._id;\r\n      if (!isMessageSentFromSelectedUser) return;\r\n\r\n      set({\r\n        messages: [...get().messages, newMessage],\r\n      });\r\n      \r\n      // Clear typing indicator when a message is received\r\n      get().updateTypingStatus(newMessage.senderId, false);\r\n      \r\n      // Mark message as seen immediately if the chat is open\r\n      get().markMessagesAsSeen(newMessage.senderId);\r\n    });\r\n    \r\n    // Listen for messages seen events\r\n    socket.on(\"messagesSeen\", ({ messageIds, seenAt, senderId, receiverId }) => {\r\n      // Only update messages if current user is the sender\r\n      if (senderId !== authUser._id) return;\r\n      \r\n      const { messages } = get();\r\n      const updatedMessages = messages.map(message => {\r\n        // If the message is in the seen messages list, update its seenAt property\r\n        if (!message.seenAt && message.senderId === senderId && message.receiverId === receiverId) {\r\n          return {\r\n            ...message,\r\n            seenAt\r\n          };\r\n        }\r\n        return message;\r\n      });\r\n      \r\n      set({ messages: updatedMessages });\r\n      \r\n      // Refresh user list to update sidebar - use silent refresh\r\n      get().getUsers(true);\r\n    });\r\n    \r\n    // Handle message deletion\r\n    socket.on(\"messageDeleted\", (messageId) => {\r\n      const { messages } = get();\r\n      const updatedMessages = messages.map(message => {\r\n        if (message._id === messageId) {\r\n          return {\r\n            ...message,\r\n            text: \"This message was deleted\",\r\n            image: \"\",\r\n            isDeleted: true\r\n          };\r\n        }\r\n        return message;\r\n      });\r\n      \r\n      set({ messages: updatedMessages });\r\n      \r\n      // Refresh user list to update sidebar - use silent refresh\r\n      get().getUsers(true);\r\n    });\r\n    \r\n    // Handle message editing\r\n    socket.on(\"messageEdited\", (updatedMessage) => {\r\n      const { messages } = get();\r\n      const updatedMessages = messages.map(message => \r\n        message._id === updatedMessage._id ? updatedMessage : message\r\n      );\r\n      \r\n      set({ messages: updatedMessages });\r\n      \r\n      // Refresh user list to update sidebar - use silent refresh\r\n      get().getUsers(true);\r\n    });\r\n    \r\n    // Handle message reactions\r\n    socket.on(\"messageReaction\", (updatedMessage) => {\r\n      const { messages } = get();\r\n      const updatedMessages = messages.map(message => \r\n        message._id === updatedMessage._id ? updatedMessage : message\r\n      );\r\n      \r\n      set({ messages: updatedMessages });\r\n    });\r\n    \r\n    // Handle typing indicator\r\n    socket.on(\"userTyping\", ({ userId, username }) => {      \r\n      // Don't show typing indicator for yourself\r\n      if (userId === authUser._id) return;\r\n      \r\n      get().updateTypingStatus(userId, true);\r\n    });\r\n    \r\n    // Handle typing stopped\r\n    socket.on(\"userStoppedTyping\", ({ userId }) => {\r\n      if (userId === authUser._id) return;\r\n      \r\n      get().updateTypingStatus(userId, false);\r\n    });\r\n  },\r\n  \r\n  // Helper method to update typing status for a user\r\n  updateTypingStatus: (userId, isTyping) => {\r\n    const { typingUsers } = get();\r\n    \r\n    set({\r\n      typingUsers: {\r\n        ...typingUsers,\r\n        [userId]: {\r\n          isTyping,\r\n          timestamp: Date.now()\r\n        }\r\n      }\r\n    });\r\n  },\r\n\r\n  unsubscribeFromMessages: () => {\r\n    const socket = useAuthStore.getState().socket;\r\n    if (!socket) return;\r\n    \r\n    socket.off(\"newMessage\");\r\n    socket.off(\"messageDeleted\");\r\n    socket.off(\"messageEdited\");\r\n    socket.off(\"messageReaction\");\r\n    socket.off(\"userTyping\");\r\n    socket.off(\"userStoppedTyping\");\r\n    socket.off(\"messagesSeen\");\r\n  },\r\n\r\n  setSelectedUser: (selectedUser) => {\r\n    set({ \r\n      selectedUser, \r\n      replyingTo: null,\r\n      // Clear typing indicators when changing chat\r\n      typingUsers: {} \r\n    });\r\n    \r\n    // Mark messages as seen when changing chat\r\n    if (selectedUser) {\r\n      setTimeout(() => {\r\n        get().markMessagesAsSeen(selectedUser._id);\r\n      }, 1000);\r\n    }\r\n  },\r\n}));\r\n","import { Users } from \"lucide-react\";\r\n\r\nconst SidebarSkeleton = () => {\r\n  // Create 8 skeleton items\r\n  const skeletonContacts = Array(8).fill(null);\r\n\r\n  return (\r\n    <aside\r\n      className=\"h-full w-20 lg:w-72 border-r border-base-300 \r\n    flex flex-col transition-all duration-200\"\r\n    >\r\n      {/* Header */}\r\n      <div className=\"border-b border-base-300 w-full p-5\">\r\n        <div className=\"flex items-center gap-2\">\r\n          <Users className=\"w-6 h-6\" />\r\n          <span className=\"font-medium hidden lg:block\">Contacts</span>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Skeleton Contacts */}\r\n      <div className=\"overflow-y-auto w-full py-3\">\r\n        {skeletonContacts.map((_, idx) => (\r\n          <div key={idx} className=\"w-full p-3 flex items-center gap-3\">\r\n            {/* Avatar skeleton */}\r\n            <div className=\"relative mx-auto lg:mx-0\">\r\n              <div className=\"skeleton size-12 rounded-full\" />\r\n            </div>\r\n\r\n            {/* User info skeleton - only visible on larger screens */}\r\n            <div className=\"hidden lg:block text-left min-w-0 flex-1\">\r\n              <div className=\"skeleton h-4 w-32 mb-2\" />\r\n              <div className=\"skeleton h-3 w-16\" />\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default SidebarSkeleton;\r\n","import { useEffect, useState, useRef } from \"react\";\r\nimport { useChatStore } from \"../store/useChatStore\";\r\nimport { useAuthStore } from \"../store/useAuthStore\";\r\nimport SidebarSkeleton from \"./skeletons/SidebarSkeleton\";\r\nimport { Search, Users } from \"lucide-react\";\r\n\r\nconst Sidebar = () => {\r\n  const { \r\n    getUsers, \r\n    users, \r\n    selectedUser, \r\n    setSelectedUser, \r\n    isUsersLoading,\r\n    userIsTyping \r\n  } = useChatStore();\r\n\r\n  const { onlineUsers, authUser } = useAuthStore();\r\n  const [showOnlineOnly, setShowOnlineOnly] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [initialLoaded, setInitialLoaded] = useState(false);\r\n  const refreshTimerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Initial load with loading indicator\r\n    getUsers().then(() => {\r\n      setInitialLoaded(true);\r\n    });\r\n    \r\n    // Set up interval to refresh users periodically with silent refresh\r\n    refreshTimerRef.current = setInterval(() => {\r\n      getUsers(true); // Silent refresh\r\n    }, 30000); // Every 30 seconds\r\n    \r\n    return () => {\r\n      if (refreshTimerRef.current) {\r\n        clearInterval(refreshTimerRef.current);\r\n      }\r\n    };\r\n  }, [getUsers]);\r\n\r\n  // Filter users based on online status and search term\r\n  const filteredUsers = users\r\n    .filter((user) => {\r\n      // Filter by online status if enabled\r\n      if (showOnlineOnly && !onlineUsers.includes(user._id)) {\r\n        return false;\r\n      }\r\n      \r\n      // Filter by search term (fullName or username)\r\n      if (searchTerm) {\r\n        const userFullNameLower = user.fullName.toLowerCase();\r\n        const userUsernameLower = user.username?.toLowerCase() || \"\";\r\n        const searchTermLower = searchTerm.toLowerCase();\r\n        \r\n        return userFullNameLower.includes(searchTermLower) || \r\n               userUsernameLower.includes(searchTermLower);\r\n      }\r\n      \r\n      return true;\r\n    });\r\n\r\n  // Show skeleton only on initial load, not during subsequent refreshes\r\n  if (isUsersLoading && !initialLoaded) {\r\n    return <SidebarSkeleton />;\r\n  }\r\n\r\n  return (\r\n    <aside className=\"h-full w-20 lg:w-80 border-r border-base-300 flex flex-col transition-all duration-200\">\r\n      <div className=\"border-b border-base-300 w-full p-5 space-y-3\">\r\n        <div className=\"flex items-center gap-2\">\r\n          <Users className=\"size-6\" />\r\n          <span className=\"font-medium hidden lg:block\">Contacts</span>\r\n        </div>\r\n        \r\n        {/* Search Component */}\r\n        <div className=\"hidden lg:block relative\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"input input-sm input-bordered w-full pl-9\"\r\n            placeholder=\"Search users...\"\r\n            value={searchTerm}\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n          />\r\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-base-content/40\" />\r\n        </div>\r\n        \r\n        {/* Online filter toggle */}\r\n        <div className=\"hidden lg:flex items-center gap-2\">\r\n          <label className=\"cursor-pointer flex items-center gap-2\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={showOnlineOnly}\r\n              onChange={(e) => setShowOnlineOnly(e.target.checked)}\r\n              className=\"checkbox checkbox-sm\"\r\n            />\r\n            <span className=\"text-sm\">Show online only</span>\r\n          </label>\r\n          <span className=\"text-xs text-zinc-500\">\r\n            ({onlineUsers.filter(id => id !== authUser?._id).length} online)\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"overflow-y-auto w-full py-3\">\r\n        {filteredUsers.length > 0 ? (\r\n          filteredUsers.map((user) => {\r\n            const isOnline = onlineUsers.includes(user._id) && !user.hideStatus;\r\n            const isTyping = userIsTyping(user._id);\r\n            const hasUnread = user.unreadCount > 0;\r\n            \r\n            return (\r\n              <button\r\n                key={user._id}\r\n                onClick={() => setSelectedUser(user)}\r\n                className={`\r\n                  w-full px-3 py-3 flex items-center gap-3\r\n                  hover:bg-base-300 transition-colors relative\r\n                  ${selectedUser?._id === user._id ? \"bg-base-300 ring-1 ring-base-300\" : \"\"}\r\n                  ${hasUnread ? \"bg-base-200\" : \"\"}\r\n                `}\r\n              >\r\n                <div className=\"relative mx-auto lg:mx-0\">\r\n                  <img\r\n                    src={user.profilePic || \"/avatar.png\"}\r\n                    alt={user.name}\r\n                    className=\"size-12 object-cover rounded-full\"\r\n                  />\r\n                  {isOnline && (\r\n                    <span\r\n                      className=\"absolute bottom-0 right-0 size-3 bg-green-500 \r\n                      rounded-full ring-2 ring-zinc-900\"\r\n                    />\r\n                  )}\r\n                </div>\r\n\r\n                {/* User info - only visible on larger screens */}\r\n                <div className=\"hidden lg:block text-left min-w-0 flex-1\">\r\n                  <div className=\"font-medium truncate flex items-center justify-between\">\r\n                    <span>{user.fullName}</span>\r\n                    {hasUnread && (\r\n                      <span className=\"badge badge-sm badge-primary ml-2\">\r\n                        {user.unreadCount}\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"text-xs text-zinc-400 truncate\">@{user.username}</div>\r\n                  \r\n                  {/* Typing indicator only, no message preview */}\r\n                  {isTyping && (\r\n                    <div className=\"text-sm text-zinc-400 truncate\">\r\n                      <span className=\"flex items-center gap-1 text-green-500\">\r\n                        <span className=\"animate-pulse\">Typing</span>\r\n                        <span className=\"typing-dots\">...</span>\r\n                      </span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                \r\n                {/* Mobile view badge */}\r\n                {hasUnread && (\r\n                  <span className=\"lg:hidden absolute top-1 right-1 badge badge-xs badge-primary\">\r\n                    {user.unreadCount}\r\n                  </span>\r\n                )}\r\n              </button>\r\n            );\r\n          })\r\n        ) : (\r\n          <div className=\"text-center text-zinc-500 py-4\">\r\n            {searchTerm ? \"No users found\" : \"No contacts available\"}\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      <style jsx=\"true\">{`\r\n        @keyframes typing {\r\n          0% { content: \"\"; }\r\n          25% { content: \".\"; }\r\n          50% { content: \"..\"; }\r\n          75% { content: \"...\"; }\r\n          100% { content: \"\"; }\r\n        }\r\n        .typing-dots::after {\r\n          content: \"\";\r\n          animation: typing 1.5s infinite ease-in-out;\r\n        }\r\n      `}</style>\r\n    </aside>\r\n  );\r\n};\r\nexport default Sidebar;\r\n","import { MessageSquare } from \"lucide-react\";\r\n\r\nconst NoChatSelected = () => {\r\n  return (\r\n    <div className=\"flex-1 flex flex-col justify-center items-center p-4 bg-base-200/50\">\r\n      <div className=\"text-center max-w-md\">\r\n        <div className=\"inline-flex items-center justify-center size-16 bg-base-300 rounded-full mb-4\">\r\n          <MessageSquare className=\"size-8 text-primary/70\" />\r\n        </div>\r\n        <h3 className=\"text-xl font-bold mb-2\">Your Messages</h3>\r\n        <p className=\"text-base-content/70 text-sm md:text-base\">\r\n          Select a contact to start chatting. Your conversations will appear here.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoChatSelected;\r\n","export function formatMessageTime(date) {\r\n  return new Date(date).toLocaleTimeString(\"en-US\", {\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n    hour12: false,\r\n  });\r\n}\r\n\r\nexport function formatTimeAgo(date) {\r\n  const now = new Date();\r\n  const diff = now - new Date(date);\r\n  \r\n  // Convert to seconds\r\n  const seconds = Math.floor(diff / 1000);\r\n  \r\n  // Less than a minute\r\n  if (seconds < 60) {\r\n    return \"just now\";\r\n  }\r\n  \r\n  // Minutes\r\n  const minutes = Math.floor(seconds / 60);\r\n  if (minutes < 60) {\r\n    return `${minutes} ${minutes === 1 ? \"minute\" : \"minutes\"} ago`;\r\n  }\r\n  \r\n  // Hours\r\n  const hours = Math.floor(minutes / 60);\r\n  if (hours < 24) {\r\n    return `${hours} ${hours === 1 ? \"hour\" : \"hours\"} ago`;\r\n  }\r\n  \r\n  // Days\r\n  const days = Math.floor(hours / 24);\r\n  if (days < 7) {\r\n    return `${days} ${days === 1 ? \"day\" : \"days\"} ago`;\r\n  }\r\n  \r\n  // Weeks\r\n  const weeks = Math.floor(days / 7);\r\n  if (weeks < 4) {\r\n    return `${weeks} ${weeks === 1 ? \"week\" : \"weeks\"} ago`;\r\n  }\r\n  \r\n  // Months\r\n  const months = Math.floor(days / 30);\r\n  if (months < 12) {\r\n    return `${months} ${months === 1 ? \"month\" : \"months\"} ago`;\r\n  }\r\n  \r\n  // Years\r\n  const years = Math.floor(days / 365);\r\n  return `${years} ${years === 1 ? \"year\" : \"years\"} ago`;\r\n}\r\n","import { useAuthStore } from \"../store/useAuthStore\";\r\nimport { useChatStore } from \"../store/useChatStore\";\r\nimport { formatTimeAgo } from \"../lib/utils\";\r\nimport { ArrowLeft } from \"lucide-react\";\r\n\r\nconst ChatHeader = ({ isTyping }) => {\r\n  const { selectedUser, setSelectedUser } = useChatStore();\r\n  const { onlineUsers } = useAuthStore();\r\n\r\n  const isOnline = selectedUser ? onlineUsers.includes(selectedUser._id) && !selectedUser.hideStatus : false;\r\n\r\n  return (\r\n    <div className=\"p-3 flex items-center gap-3 border-b border-base-300\">\r\n      {/* Back button for mobile */}\r\n      <button \r\n        className=\"md:hidden btn btn-sm btn-ghost\" \r\n        onClick={() => setSelectedUser(null)}\r\n      >\r\n        <ArrowLeft size={20} />\r\n      </button>\r\n      \r\n      <div className=\"relative\">\r\n        <img\r\n          src={selectedUser?.profilePic || \"/avatar.png\"}\r\n          alt=\"profile pic\"\r\n          className=\"size-12 rounded-full object-cover\"\r\n        />\r\n        {isOnline && (\r\n          <span className=\"absolute bottom-0 right-0 size-3 bg-green-500 rounded-full ring-2 ring-zinc-900\" />\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"flex-1\">\r\n        <div className=\"font-semibold\">{selectedUser?.fullName}</div>\r\n        <div className=\"text-xs text-base-content/70 flex items-center\">\r\n          {isTyping ? (\r\n            <span className=\"flex items-center gap-1 text-green-500\">\r\n              <span className=\"animate-pulse\">Typing</span>\r\n              <span className=\"dot-animate\">...</span>\r\n            </span>\r\n          ) : isOnline ? (\r\n            \"Online\"\r\n          ) : selectedUser?.lastSeen ? (\r\n            <>Last seen {formatTimeAgo(selectedUser.lastSeen)}</>\r\n          ) : (\r\n            \"Offline\"\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default ChatHeader;\r\n","import { useState, useRef, useEffect } from \"react\";\r\nimport { ImagePlus, Send, X, Reply, Image, Smile } from \"lucide-react\";\r\nimport { useChatStore } from \"../store/useChatStore\";\r\nimport { useAuthStore } from \"../store/useAuthStore\";\r\nimport toast from \"react-hot-toast\";\r\nimport EmojiPicker from \"emoji-picker-react\";\r\n\r\n// Function to compress image\r\nconst compressImage = async (base64Image, maxWidth = 1200, quality = 0.7) => {\r\n  return new Promise((resolve) => {\r\n    const img = new Image();\r\n    img.src = base64Image;\r\n    img.onload = () => {\r\n      const canvas = document.createElement(\"canvas\");\r\n      const width = Math.min(maxWidth, img.width);\r\n      const scaleFactor = width / img.width;\r\n      const height = img.height * scaleFactor;\r\n      \r\n      canvas.width = width;\r\n      canvas.height = height;\r\n      \r\n      const ctx = canvas.getContext(\"2d\");\r\n      ctx.drawImage(img, 0, 0, width, height);\r\n      \r\n      // Convert to base64 with reduced quality\r\n      const compressedBase64 = canvas.toDataURL(\"image/jpeg\", quality);\r\n      resolve(compressedBase64);\r\n    };\r\n  });\r\n};\r\n\r\nconst MessageInput = () => {\r\n  const [text, setText] = useState(\"\");\r\n  const [image, setImage] = useState(null);\r\n  const [imagePreview, setImagePreview] = useState(null);\r\n  const [isProcessingImage, setIsProcessingImage] = useState(false);\r\n  const imageInputRef = useRef(null);\r\n  const textInputRef = useRef(null);\r\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n\r\n  const { sendMessage, replyingTo, clearReplyingTo, setUserTyping } = useChatStore();\r\n  const { isUpdatingProfile, authUser, selectedUser } = useAuthStore();\r\n\r\n  useEffect(() => {\r\n    if (replyingTo && textInputRef.current) {\r\n      textInputRef.current.focus();\r\n    }\r\n  }, [replyingTo]);\r\n\r\n  const handleTyping = (e) => {\r\n    setText(e.target.value);\r\n    \r\n    // Set typing status\r\n    if (e.target.value.trim() !== \"\") {\r\n      setUserTyping(true);\r\n    } else {\r\n      setUserTyping(false);\r\n    }\r\n  };\r\n\r\n  const handleImageChange = async (e) => {\r\n    const file = e.target.files[0];\r\n    if (!file) return;\r\n    \r\n    // Validate file size (15MB max before compression)\r\n    if (file.size > 15 * 1024 * 1024) {\r\n      toast.error(\"Image is too large (max 15MB)\");\r\n      return;\r\n    }\r\n    \r\n    setIsProcessingImage(true);\r\n    \r\n    try {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(file);\r\n      \r\n      reader.onload = async () => {\r\n        const originalBase64 = reader.result;\r\n        \r\n        // Show preview immediately\r\n        setImagePreview(originalBase64);\r\n        \r\n        // Compress in background\r\n        try {\r\n          const compressedImage = await compressImage(originalBase64);\r\n          setImage(compressedImage);\r\n          toast.success(\"Image compressed successfully\");\r\n        } catch (error) {\r\n          console.error(\"Error compressing image:\", error);\r\n          setImage(originalBase64); // Fall back to original if compression fails\r\n        }\r\n        \r\n        setIsProcessingImage(false);\r\n      };\r\n      \r\n      reader.onerror = () => {\r\n        toast.error(\"Error reading file\");\r\n        setIsProcessingImage(false);\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Error processing image:\", error);\r\n      toast.error(\"Failed to process image\");\r\n      setIsProcessingImage(false);\r\n    }\r\n\r\n    if (imageInputRef.current) {\r\n      imageInputRef.current.value = \"\";\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if ((!text || !text.trim()) && !image) return;\r\n    \r\n    if (isProcessingImage) {\r\n      toast.error(\"Please wait for the image to finish processing\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await sendMessage({ text, image });\r\n      setText(\"\");\r\n      setImage(null);\r\n      setImagePreview(null);\r\n      setUserTyping(false);\r\n    } catch (error) {\r\n      console.log(\"Error sending message:\", error);\r\n      toast.error(\"Failed to send message. Please try again.\");\r\n    }\r\n  };\r\n\r\n  const handleEmojiClick = (emoji) => {\r\n    setText(text + emoji.native);\r\n  };\r\n\r\n  return (\r\n    <form\r\n      onSubmit={handleSubmit}\r\n      className=\"p-3 border-t border-base-300 bg-base-100\"\r\n    >\r\n      {/* Reply Preview */}\r\n      {replyingTo && (\r\n        <div className=\"mb-2 p-2 rounded bg-base-200 flex items-start justify-between\">\r\n          <div className=\"flex items-start gap-2 overflow-hidden\">\r\n            <div className=\"p-1 bg-base-300 rounded flex-shrink-0\">\r\n              <Reply size={14} />\r\n            </div>\r\n            <div className=\"min-w-0 flex-1\">\r\n              <p className=\"text-xs font-medium\">\r\n                Replying to {replyingTo.senderId === authUser?._id ? 'yourself' : selectedUser?.fullName}\r\n              </p>\r\n              <p className=\"text-xs truncate text-base-content/70\">\r\n                {replyingTo.text || (replyingTo.image ? \"Image\" : \"Message\")}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"text-base-content/50 hover:text-base-content\"\r\n            onClick={clearReplyingTo}\r\n          >\r\n            <X size={14} />\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"flex items-end gap-2\">\r\n        {/* Image Preview */}\r\n        {imagePreview && (\r\n          <div className=\"relative mb-2 max-w-xs\">\r\n            <img\r\n              src={imagePreview}\r\n              alt=\"Preview\"\r\n              className=\"w-full h-32 object-cover rounded-md\"\r\n            />\r\n            <button\r\n              type=\"button\"\r\n              className=\"absolute top-1 right-1 bg-black/50 rounded-full p-1 text-white\"\r\n              onClick={() => {\r\n                setImage(null);\r\n                setImagePreview(null);\r\n              }}\r\n            >\r\n              <X size={16} />\r\n            </button>\r\n          </div>\r\n        )}\r\n\r\n        {/* Input Area with Controls */}\r\n        <div className=\"flex-1 flex items-end gap-1 bg-base-200 rounded-lg p-1\">\r\n          {/* Image Upload */}\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-sm btn-ghost btn-circle\"\r\n            onClick={() => document.getElementById(\"imageInput\").click()}\r\n          >\r\n            <Image size={18} />\r\n            <input\r\n              type=\"file\"\r\n              id=\"imageInput\"\r\n              className=\"hidden\"\r\n              onChange={handleImageChange}\r\n              accept=\"image/*\"\r\n            />\r\n          </button>\r\n\r\n          {/* Text Input */}\r\n          <textarea\r\n            value={text}\r\n            onChange={handleTyping}\r\n            onKeyDown={(e) => {\r\n              if (e.key === 'Enter' && !e.shiftKey) {\r\n                e.preventDefault();\r\n                handleSubmit(e);\r\n              }\r\n            }}\r\n            placeholder=\"Type a message...\"\r\n            className=\"flex-1 bg-transparent border-0 focus:ring-0 resize-none max-h-32 py-2 px-2 text-sm\"\r\n            rows={text.includes('\\n') ? 2 : 1}\r\n            ref={textInputRef}\r\n          />\r\n\r\n          {/* Emoji Picker Button */}\r\n          <div className=\"relative\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-sm btn-ghost btn-circle\"\r\n              onClick={() => setShowEmojiPicker(!showEmojiPicker)}\r\n            >\r\n              <Smile size={18} />\r\n            </button>\r\n            {showEmojiPicker && (\r\n              <div className=\"absolute bottom-full right-0 mb-2\">\r\n                <EmojiPicker\r\n                  onEmojiClick={handleEmojiClick}\r\n                  lazyLoadEmojis\r\n                  theme=\"light\"\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Send Button */}\r\n          <button\r\n            type=\"submit\"\r\n            className={`btn btn-sm ${\r\n              text.trim() || image ? \"btn-primary\" : \"btn-disabled\"\r\n            } rounded-full w-10 h-10 min-h-0 p-0 flex items-center justify-center`}\r\n            disabled={!text.trim() && !image}\r\n          >\r\n            <Send size={18} />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MessageInput;\r\n","const MessageSkeleton = () => {\r\n  // Create an array of 6 items for skeleton messages\r\n  const skeletonMessages = Array(6).fill(null);\r\n\r\n  return (\r\n    <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\r\n      {skeletonMessages.map((_, idx) => (\r\n        <div key={idx} className={`chat ${idx % 2 === 0 ? \"chat-start\" : \"chat-end\"}`}>\r\n          <div className=\"chat-image avatar\">\r\n            <div className=\"size-10 rounded-full\">\r\n              <div className=\"skeleton w-full h-full rounded-full\" />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"chat-header mb-1\">\r\n            <div className=\"skeleton h-4 w-16\" />\r\n          </div>\r\n\r\n          <div className=\"chat-bubble bg-transparent p-0\">\r\n            <div className=\"skeleton h-16 w-[200px]\" />\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessageSkeleton;\r\n","import { useChatStore } from \"../store/useChatStore\";\nimport { useEffect, useRef, useState } from \"react\";\n\nimport ChatHeader from \"./ChatHeader\";\nimport MessageInput from \"./MessageInput\";\nimport MessageSkeleton from \"./skeletons/MessageSkeleton\";\nimport { useAuthStore } from \"../store/useAuthStore\";\nimport { formatMessageTime } from \"../lib/utils\";\nimport { CheckCheck, Edit, MessageSquareOff, MoreVertical, Reply, Smile, Trash, X } from \"lucide-react\";\nimport toast from \"react-hot-toast\";\n\n// Available emoji reactions\nconst EMOJI_REACTIONS = [\"👍\", \"❤️\", \"😂\", \"😮\", \"😢\", \"🙏\"];\n\nconst ChatContainer = () => {\n  const {\n    messages,\n    getMessages,\n    isMessagesLoading,\n    selectedUser,\n    subscribeToMessages,\n    unsubscribeFromMessages,\n    setReplyingTo,\n    deleteMessage,\n    editMessage,\n    addReaction,\n    userIsTyping,\n    markMessagesAsSeen\n  } = useChatStore();\n  const { authUser } = useAuthStore();\n  const messageEndRef = useRef(null);\n  const [editingMessage, setEditingMessage] = useState(null);\n  const [editText, setEditText] = useState(\"\");\n  const [activeMessageMenuId, setActiveMessageMenuId] = useState(null);\n  const [activeReactionId, setActiveReactionId] = useState(null);\n\n  // Check if selected user is typing\n  const isUserTyping = selectedUser ? userIsTyping(selectedUser._id) : false;\n\n  useEffect(() => {\n    getMessages(selectedUser._id);\n    subscribeToMessages();\n\n    return () => unsubscribeFromMessages();\n  }, [selectedUser._id, getMessages, subscribeToMessages, unsubscribeFromMessages]);\n\n  // Track if we should perform smooth scrolling or instant scrolling\n  const [shouldSmoothScroll, setShouldSmoothScroll] = useState(true);\n  const chatContainerRef = useRef(null);\n  const prevMessagesLength = useRef(0);\n\n  // Improved scrolling behavior - separate for different cases\n  useEffect(() => {\n    // Skip if no messages\n    if (!messages.length) return;\n    \n    // Initial case - instant scroll to bottom on first load\n    if (prevMessagesLength.current === 0 && messages.length > 0) {\n      if (messageEndRef.current) {\n        messageEndRef.current.scrollIntoView({ behavior: \"instant\" });\n      }\n    } \n    // New message case - check if we should auto-scroll\n    else if (messages.length > prevMessagesLength.current) {\n      const chatContainer = chatContainerRef.current;\n      const isScrolledToBottom = chatContainer && \n        (chatContainer.scrollHeight - chatContainer.scrollTop - chatContainer.clientHeight < 100);\n      \n      // If user is at the bottom (or close to it), smooth scroll to the new message\n      if (messageEndRef.current && isScrolledToBottom) {\n        messageEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n      }\n    }\n    \n    // Update previous length\n    prevMessagesLength.current = messages.length;\n  }, [messages]);\n  \n  // Handle scrolling on typing status change\n  useEffect(() => {\n    if (isUserTyping && messageEndRef.current) {\n      const chatContainer = chatContainerRef.current;\n      const isScrolledToBottom = chatContainer && \n        (chatContainer.scrollHeight - chatContainer.scrollTop - chatContainer.clientHeight < 100);\n      \n      if (isScrolledToBottom) {\n        messageEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n      }\n    }\n  }, [isUserTyping]);\n  \n  // Add scroll event listener to detect manual scrolling\n  useEffect(() => {\n    const handleScroll = () => {\n      const chatContainer = chatContainerRef.current;\n      if (!chatContainer) return;\n      \n      // If user has scrolled away from bottom, disable auto-scrolling temporarily\n      const isScrolledToBottom = \n        chatContainer.scrollHeight - chatContainer.scrollTop - chatContainer.clientHeight < 100;\n      setShouldSmoothScroll(isScrolledToBottom);\n    };\n    \n    const chatContainer = chatContainerRef.current;\n    if (chatContainer) {\n      chatContainer.addEventListener('scroll', handleScroll);\n    }\n    \n    return () => {\n      if (chatContainer) {\n        chatContainer.removeEventListener('scroll', handleScroll);\n      }\n    };\n  }, []);\n\n  // Add event listener for when images load to recalculate scroll\n  useEffect(() => {\n    const handleImageLoad = () => {\n      // Only auto-scroll if we're already at the bottom\n      if (shouldSmoothScroll && messageEndRef.current) {\n        messageEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n      }\n    };\n    \n    // Add event listeners to all message images\n    const messageImages = document.querySelectorAll('.chat-container img');\n    messageImages.forEach(img => {\n      img.addEventListener('load', handleImageLoad);\n    });\n    \n    // Cleanup\n    return () => {\n      messageImages.forEach(img => {\n        img.removeEventListener('load', handleImageLoad);\n      });\n    };\n  }, [messages, shouldSmoothScroll]);\n\n  // Mark messages as seen when the user scrolls or interacts with the chat\n  useEffect(() => {\n    if (selectedUser && messages.length > 0) {\n      const handleVisibility = () => {\n        if (document.visibilityState === 'visible') {\n          markMessagesAsSeen(selectedUser._id);\n        }\n      };\n      \n      const handleScroll = () => {\n        markMessagesAsSeen(selectedUser._id);\n      };\n      \n      // Mark as seen initially\n      markMessagesAsSeen(selectedUser._id);\n      \n      // Set up event listeners\n      document.addEventListener('visibilitychange', handleVisibility);\n      const chatContainer = document.querySelector('.chat-container');\n      if (chatContainer) {\n        chatContainer.addEventListener('scroll', handleScroll);\n      }\n      \n      return () => {\n        document.removeEventListener('visibilitychange', handleVisibility);\n        if (chatContainer) {\n          chatContainer.removeEventListener('scroll', handleScroll);\n        }\n      };\n    }\n  }, [selectedUser, messages, markMessagesAsSeen]);\n\n  const handleReplyClick = (message) => {\n    setReplyingTo(message);\n    setActiveMessageMenuId(null);\n  };\n\n  const handleEditClick = (message) => {\n    // Check if message is less than 15 minutes old\n    const messageAge = (Date.now() - new Date(message.createdAt)) / 1000;\n    if (messageAge > 900) {\n      toast.error(\"Messages can only be edited within 15 minutes of sending\");\n      return;\n    }\n    \n    setEditingMessage(message);\n    setEditText(message.text || \"\");\n    setActiveMessageMenuId(null);\n  };\n\n  const handleDeleteClick = async (messageId) => {\n    await deleteMessage(messageId);\n    setActiveMessageMenuId(null);\n  };\n\n  const handleEditCancel = () => {\n    setEditingMessage(null);\n    setEditText(\"\");\n  };\n\n  const handleEditSubmit = async () => {\n    if (!editText.trim()) {\n      toast.error(\"Message cannot be empty\");\n      return;\n    }\n    \n    await editMessage(editingMessage._id, editText);\n    setEditingMessage(null);\n    setEditText(\"\");\n  };\n\n  const handleReactionClick = async (messageId, emoji) => {\n    await addReaction(messageId, emoji);\n    setActiveReactionId(null);\n  };\n  \n  const handleMoreClick = (messageId) => {\n    setActiveMessageMenuId(activeMessageMenuId === messageId ? null : messageId);\n    setActiveReactionId(null);\n  };\n  \n  const handleReactionMenuClick = (messageId) => {\n    setActiveReactionId(activeReactionId === messageId ? null : messageId);\n    setActiveMessageMenuId(null);\n  };\n\n  // Function to count reactions by emoji\n  const countReactions = (reactions) => {\n    const counts = {};\n    reactions.forEach(reaction => {\n      counts[reaction.emoji] = (counts[reaction.emoji] || 0) + 1;\n    });\n    return counts;\n  };\n\n  if (isMessagesLoading) {\n    return (\n      <div className=\"flex-1 flex flex-col overflow-auto\">\n        <ChatHeader />\n        <MessageSkeleton />\n        <MessageInput />\n      </div>\n    );\n  }\n\n  // Get the last message sent by the current user\n  const lastOwnMessage = [...messages]\n    .reverse()\n    .find(message => message.senderId === authUser._id && !message.isDeleted);\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-auto\">\n      <ChatHeader isTyping={isUserTyping} />\n\n      <div \n        className=\"flex-1 overflow-y-auto p-4 space-y-4 chat-container\" \n        ref={chatContainerRef}\n      >\n        {/* Message history button - visible when scrolled away from bottom */}\n        {!shouldSmoothScroll && messages.length > 10 && (\n          <button\n            className=\"btn btn-sm btn-primary fixed bottom-20 right-4 z-10 rounded-full shadow-md\"\n            onClick={() => {\n              if (messageEndRef.current) {\n                messageEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n                setShouldSmoothScroll(true);\n              }\n            }}\n          >\n            <span>↓ Latest Messages</span>\n          </button>\n        )}\n      \n        {messages.map((message, idx) => {\n          const isOwnMessage = message.senderId === authUser._id;\n          const reactionCounts = countReactions(message.reactions || []);\n          const hasUserReacted = (emoji) => \n            message.reactions?.some(r => r.userId === authUser._id && r.emoji === emoji);\n            \n          // Find the reply source message if this is a reply\n          const replySourceMessage = message.replyTo \n            ? messages.find(m => m._id === message.replyTo._id) || message.replyTo\n            : null;\n            \n          // Check if this is the last message from the current user\n          const isLastOwnMessage = lastOwnMessage && lastOwnMessage._id === message._id;\n          \n          return (\n            <div\n              key={message._id}\n              className={`chat ${isOwnMessage ? \"chat-end\" : \"chat-start\"}`}\n              ref={idx === messages.length - 1 ? messageEndRef : null}\n            >\n              <div className=\"chat-image avatar\">\n                <div className=\"size-10 rounded-full border\">\n                  <img\n                    src={\n                      isOwnMessage\n                        ? authUser.profilePic || \"/avatar.png\"\n                        : selectedUser.profilePic || \"/avatar.png\"\n                    }\n                    alt=\"profile pic\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"chat-header mb-1 flex items-center gap-2\">\n                <time className=\"text-xs opacity-50 ml-1\">\n                  {formatMessageTime(message.createdAt)}\n                  {message.isEdited && <span className=\"ml-1\">(edited)</span>}\n                </time>\n                \n                {/* Seen indicator for own messages */}\n                {isOwnMessage && isLastOwnMessage && (\n                  <span className=\"text-xs flex items-center gap-0.5 text-primary opacity-80\">\n                    <CheckCheck size={12} className={message.seenAt ? 'fill-primary' : ''} />\n                    {message.seenAt ? 'Seen' : 'Sent'}\n                  </span>\n                )}\n              </div>\n              \n              {/* Editing UI */}\n              {editingMessage && editingMessage._id === message._id ? (\n                <div className=\"chat-bubble flex flex-col p-2\">\n                  <textarea\n                    className=\"textarea textarea-bordered w-full mb-2\"\n                    value={editText}\n                    onChange={(e) => setEditText(e.target.value)}\n                    autoFocus\n                  />\n                  <div className=\"flex justify-end gap-2\">\n                    <button \n                      onClick={handleEditCancel}\n                      className=\"btn btn-sm btn-ghost\"\n                    >\n                      Cancel\n                    </button>\n                    <button \n                      onClick={handleEditSubmit}\n                      className=\"btn btn-sm btn-primary\"\n                    >\n                      Save\n                    </button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"relative group\">\n                  {/* Reply reference */}\n                  {replySourceMessage && (\n                    <div className=\"chat-bubble chat-bubble-info p-2 mb-1 opacity-70\">\n                      <div className=\"text-xs font-medium mb-1\">\n                        Replying to {replySourceMessage.senderId === authUser._id ? 'yourself' : selectedUser.fullName}\n                      </div>\n                      <p className=\"text-sm truncate\">\n                        {replySourceMessage.text || (replySourceMessage.image ? \"Image\" : \"Message\")}\n                      </p>\n                    </div>\n                  )}\n                  \n                  <div className=\"chat-bubble flex flex-col relative\">\n                    {message.image && (\n                      <img\n                        src={message.image}\n                        alt=\"Attachment\"\n                        className=\"sm:max-w-[200px] rounded-md mb-2\"\n                      />\n                    )}\n                    {message.isDeleted ? (\n                      <div className=\"flex items-center gap-2 italic opacity-60\">\n                        <MessageSquareOff size={14} />\n                        <span>{message.text}</span>\n                      </div>\n                    ) : (\n                      <p>{message.text}</p>\n                    )}\n                    \n                    {/* Action buttons */}\n                    {!message.isDeleted && (\n                      <div \n                        className={`\n                          absolute ${isOwnMessage ? 'left-0' : 'right-0'} top-0 -m-2\n                          opacity-0 group-hover:opacity-100 transition-opacity\n                          flex gap-1\n                        `}\n                      >\n                        {/* Reaction button */}\n                        <button \n                          onClick={() => handleReactionMenuClick(message._id)}\n                          className=\"btn btn-circle btn-xs bg-base-100\"\n                        >\n                          <Smile size={12} />\n                        </button>\n                        \n                        {/* Reply button */}\n                        <button \n                          onClick={() => handleReplyClick(message)}\n                          className=\"btn btn-circle btn-xs bg-base-100\"\n                        >\n                          <Reply size={12} />\n                        </button>\n                        \n                        {/* More options button (only for own messages) */}\n                        {isOwnMessage && (\n                          <button \n                            onClick={() => handleMoreClick(message._id)}\n                            className=\"btn btn-circle btn-xs bg-base-100\"\n                          >\n                            <MoreVertical size={12} />\n                          </button>\n                        )}\n                      </div>\n                    )}\n                    \n                    {/* Reaction emoji menu */}\n                    {activeReactionId === message._id && (\n                      <div className=\"absolute top-0 -mt-10 bg-base-200 rounded-full px-2 py-1 flex gap-1 shadow-lg\">\n                        {EMOJI_REACTIONS.map(emoji => (\n                          <button\n                            key={emoji}\n                            onClick={() => handleReactionClick(message._id, emoji)}\n                            className={`text-lg hover:scale-125 transition-transform ${\n                              hasUserReacted(emoji) ? 'opacity-50' : 'opacity-100'\n                            }`}\n                          >\n                            {emoji}\n                          </button>\n                        ))}\n                        <button \n                          onClick={() => setActiveReactionId(null)}\n                          className=\"ml-1 text-base-content/50 hover:text-base-content\"\n                        >\n                          <X size={14} />\n                        </button>\n                      </div>\n                    )}\n                    \n                    {/* More options menu (for edit/delete) */}\n                    {activeMessageMenuId === message._id && (\n                      <div className=\"absolute top-0 -mt-20 right-0 bg-base-200 rounded-lg shadow-lg overflow-hidden\">\n                        <button \n                          onClick={() => handleEditClick(message)}\n                          className=\"flex items-center gap-2 px-3 py-2 w-full hover:bg-base-300 text-left\"\n                        >\n                          <Edit size={14} />\n                          <span>Edit</span>\n                        </button>\n                        <button \n                          onClick={() => handleDeleteClick(message._id)}\n                          className=\"flex items-center gap-2 px-3 py-2 w-full hover:bg-base-300 text-left text-error\"\n                        >\n                          <Trash size={14} />\n                          <span>Delete</span>\n                        </button>\n                      </div>\n                    )}\n                  </div>\n                  \n                  {/* Reactions display */}\n                  {Object.keys(reactionCounts).length > 0 && (\n                    <div className=\"chat-footer opacity-75 flex flex-wrap gap-1 mt-1\">\n                      {Object.entries(reactionCounts).map(([emoji, count]) => (\n                        <button\n                          key={emoji}\n                          onClick={() => handleReactionClick(message._id, emoji)}\n                          className={`bg-base-200 rounded-full px-1.5 py-0.5 text-xs flex items-center gap-1 hover:bg-base-300 ${\n                            hasUserReacted(emoji) ? 'ring-1 ring-primary/30' : ''\n                          }`}\n                        >\n                          <span>{emoji}</span>\n                          <span>{count}</span>\n                        </button>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          );\n        })}\n        \n        {/* Typing indicator */}\n        {isUserTyping && (\n          <div className=\"chat chat-start\" ref={messageEndRef}>\n            <div className=\"chat-image avatar\">\n              <div className=\"size-10 rounded-full border\">\n                <img\n                  src={selectedUser.profilePic || \"/avatar.png\"}\n                  alt=\"profile pic\"\n                />\n              </div>\n            </div>\n            <div className=\"chat-bubble chat-bubble-info flex gap-1 items-center py-2 px-4 min-h-0\">\n              <span className=\"typing-dot\"></span>\n              <span className=\"typing-dot\"></span>\n              <span className=\"typing-dot\"></span>\n              <style jsx=\"true\">{`\n                .typing-dot {\n                  width: 6px;\n                  height: 6px;\n                  border-radius: 50%;\n                  background-color: currentColor;\n                  animation: typingAnimation 1.5s infinite ease-in-out;\n                }\n                .typing-dot:nth-child(2) {\n                  animation-delay: 0.5s;\n                }\n                .typing-dot:nth-child(3) {\n                  animation-delay: 1s;\n                }\n                @keyframes typingAnimation {\n                  0% { opacity: 0.2; transform: scale(0.8); }\n                  50% { opacity: 1; transform: scale(1.1); }\n                  100% { opacity: 0.2; transform: scale(0.8); }\n                }\n              `}</style>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <MessageInput />\n    </div>\n  );\n};\nexport default ChatContainer;\n","import { useChatStore } from \"../store/useChatStore\";\r\n\r\nimport Sidebar from \"../components/Sidebar\";\r\nimport NoChatSelected from \"../components/NoChatSelected\";\r\nimport ChatContainer from \"../components/ChatContainer\";\r\n\r\nconst HomePage = () => {\r\n  const { selectedUser } = useChatStore();\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-base-200\">\r\n      <div className=\"flex items-center justify-center pt-4 md:pt-16 px-2 sm:px-4\">\r\n        <div className=\"bg-base-100 rounded-lg shadow-lg w-full h-[calc(100vh-2rem)] md:h-[calc(100vh-6rem)] md:max-w-6xl overflow-hidden\">\r\n          <div className=\"flex h-full rounded-lg overflow-hidden\">\r\n            {/* Hide sidebar on mobile when a chat is selected */}\r\n            <div className={`${selectedUser ? 'hidden md:block' : 'block'}`}>\r\n              <Sidebar />\r\n            </div>\r\n\r\n            {/* Show back button on mobile */}\r\n            {!selectedUser ? (\r\n              <NoChatSelected />\r\n            ) : (\r\n              <div className=\"flex-1 flex flex-col\">\r\n                <ChatContainer />\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default HomePage;\r\n"],"names":["useChatStore","create","set","get","messages","users","selectedUser","isUsersLoading","isMessagesLoading","replyingTo","typingUsers","typingTimeout","typingDebounceTime","getUsers","async","silentRefresh","res","axiosInstance","authUserId","_a","useAuthStore","getState","authUser","_id","filteredUsers","data","map","user","lastMessage","senderId","unreadCount","error","toast","_c","_b","response","message","getMessages","userId","markMessagesAsSeen","post","socket","emit","updatedMessages","seenAt","Date","toISOString","sendMessage","messageData","replyToId","setUserTyping","editMessage","messageId","text","put","success","deleteMessage","delete","image","isDeleted","addReaction","emoji","setReplyingTo","clearReplyingTo","isTyping","connected","clearTimeout","timeout","setTimeout","receiverId","userIsTyping","subscribeToMessages","io","opts","query","username","fullName","on","newMessage","updateTypingStatus","messageIds","updatedMessage","timestamp","now","unsubscribeFromMessages","off","setSelectedUser","SidebarSkeleton","skeletonContacts","Array","fill","jsxRuntimeExports","jsxs","className","children","jsx","Users","_","idx","Sidebar","onlineUsers","showOnlineOnly","setShowOnlineOnly","useState","searchTerm","setSearchTerm","initialLoaded","setInitialLoaded","refreshTimerRef","useRef","useEffect","then","current","setInterval","clearInterval","filter","includes","userFullNameLower","toLowerCase","userUsernameLower","searchTermLower","type","placeholder","value","onChange","e","target","Search","checked","id","length","isOnline","hideStatus","hasUnread","onClick","src","profilePic","alt","name","NoChatSelected","MessageSquare","formatTimeAgo","date","diff","seconds","Math","floor","minutes","hours","days","weeks","months","years","ChatHeader","ArrowLeft","size","lastSeen","Fragment","MessageInput","setText","setImage","imagePreview","setImagePreview","isProcessingImage","setIsProcessingImage","imageInputRef","textInputRef","showEmojiPicker","setShowEmojiPicker","isUpdatingProfile","focus","handleSubmit","preventDefault","trim","onSubmit","Reply","X","document","getElementById","click","Image","file","files","reader","FileReader","readAsDataURL","onload","originalBase64","result","compressedImage","base64Image","maxWidth","quality","Promise","resolve","img","canvas","createElement","width","min","scaleFactor","height","getContext","drawImage","compressedBase64","toDataURL","compressImage","onerror","accept","onKeyDown","key","shiftKey","rows","ref","Smile","EmojiPicker","onEmojiClick","native","lazyLoadEmojis","theme","disabled","Send","MessageSkeleton","skeletonMessages","EMOJI_REACTIONS","ChatContainer","messageEndRef","editingMessage","setEditingMessage","editText","setEditText","activeMessageMenuId","setActiveMessageMenuId","activeReactionId","setActiveReactionId","isUserTyping","shouldSmoothScroll","setShouldSmoothScroll","chatContainerRef","prevMessagesLength","scrollIntoView","behavior","chatContainer","isScrolledToBottom","scrollHeight","scrollTop","clientHeight","handleScroll","addEventListener","removeEventListener","handleImageLoad","messageImages","querySelectorAll","forEach","handleVisibility","visibilityState","querySelector","handleEditCancel","handleEditSubmit","handleReactionClick","lastOwnMessage","reverse","find","isOwnMessage","reactionCounts","reactions","counts","reaction","countReactions","hasUserReacted","some","r","replySourceMessage","replyTo","m","isLastOwnMessage","createdAt","toLocaleTimeString","hour","minute","hour12","isEdited","CheckCheck","autoFocus","MessageSquareOff","handleReactionMenuClick","handleReplyClick","handleMoreClick","MoreVertical","handleEditClick","Edit","handleDeleteClick","Trash","Object","keys","entries","count","HomePage"],"mappings":"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"}